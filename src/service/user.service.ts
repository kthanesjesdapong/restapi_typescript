import { DocumentDefinition } from 'mongoose';
import UserModel, { User } from '../models/user.models';

//DocumentDefinition is a generic type, so import our User interface that comes from our UserDocuments

//We use the Omit flag and omit createAt, updatedAt because it is generated by mongoose when the user is created
export async function createUser(input: DocumentDefinition<Omit<User, 'createdAt' | 'updatedAt' | 'comparePassword'>>) {

    try {
        //We're calling our UserModel, and we're going to be creating it based on the user's input.
        //This is going to be used in our createUserHandler Function
        return await UserModel.create(input);
    } catch (e: any) {
        throw new Error(e);
    }
}
// When we destructure props in TS, you assign the typing following the destructuring
export async function validatePassword({ email, password }: {
    email: string; password: string;
}) {

    const user = await UserModel.findOne({ email });

    if (!user) {
        return false;
    }
}